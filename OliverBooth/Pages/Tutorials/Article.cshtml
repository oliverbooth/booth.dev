@page "/tutorial/{**slug}"
@using System.Diagnostics
@using Humanizer
@using Markdig
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using OliverBooth.Common.Data
@using OliverBooth.Common.Data.Blog
@using OliverBooth.Common.Data.Web
@using OliverBooth.Common.Services
@inject ITutorialService TutorialService
@inject MarkdownPipeline MarkdownPipeline
@model Article

@if (Model.CurrentArticle is not { } article)
{
    return;
}

@{
    ViewData["Post"] = article;
    ViewData["Title"] = article.Title;
    ViewData["Page"] = "Tutorials";
    DateTimeOffset published = article.Published;

    var parents = new Stack<ITutorialFolder>();
    int? parent = article.Folder;
    while (parent is not null)
    {
        ITutorialFolder? folder = TutorialService.GetFolder(parent.Value);
        Debug.Assert(folder is not null);
        parents.Push(folder);

        parent = folder.Parent;
    }
}

<article class="post-single">
    <header class="post-header">
        <div class="breadcrumbs">
            <a asp-page="/Index">Home</a>
            &nbsp;»&nbsp;
            <a asp-page="/Tutorials/Index">Tutorials</a>
            @while (parents.Count > 0)
            {
                <span>&nbsp;»&nbsp;</span>
                ITutorialFolder current = parents.Pop();
                <a asp-page="/Tutorials/Index" asp-route-slug="@TutorialService.GetFullSlug(current)">@current.Title</a>
            }
            <span>&nbsp;»&nbsp;</span>
            <a asp-page="/Tutorials/Article" asp-route-slug="@TutorialService.GetFullSlug(article)">@article.Title</a>
        </div>
        <h1 class="post-title entry-hint-parent">@article.Title</h1>
        <div class="post-meta">
            <span title="@(published.ToString("s"))">@published.ToString("D")</span>
            &nbsp;·
            @Math.Max(1, article.Body.Split().Length / 275) min
        </div>
    </header>

    <div class="post-content">
        @Html.Raw(TutorialService.RenderArticle(article))
    </div>

    @if (article.HasOtherParts)
    {
        <footer class="post-footer">
            <nav class="paginav">
                @if (article.PreviousPart is { } previousPartId &&
                     TutorialService.TryGetArticle(previousPartId, out ITutorialArticle? previousPart) &&
                     previousPart.Visibility == Visibility.Published)
                {
                    <a class="prev" asp-page="Article"
                       asp-route-slug="@TutorialService.GetFullSlug(previousPart)">
                        <span class="title">« Prev</span>
                        <br>
                        <span>@previousPart.Title</span>
                    </a>
                }
                @if (article.NextPart is { } nextPartId &&
                     TutorialService.TryGetArticle(nextPartId, out ITutorialArticle? nextPart) &&
                     nextPart.Visibility == Visibility.Published)
                {
                    <a class="next" asp-page="Article"
                       asp-route-slug="@TutorialService.GetFullSlug(nextPart)">
                        <span class="title">Next »</span>
                        <br>
                        <span>@nextPart.Title</span>
                    </a>
                }
            </nav>
        </footer>
    }
</article>

@if (article.EnableComments)
{
    <div class="giscus"></div>
    @section Scripts
    {
        <script src="https://giscus.app/client.js"
                data-repo="oliverbooth/oliverbooth.dev"
                data-repo-id="MDEwOlJlcG9zaXRvcnkyNDUxODEyNDI="
                data-category="Comments"
                data-category-id="DIC_kwDODp0rOs4Ce_Nj"
                data-mapping="pathname"
                data-strict="0"
                data-reactions-enabled="1"
                data-emit-metadata="0"
                data-input-position="bottom"
                data-theme="preferred_color_scheme"
                data-lang="en"
                crossorigin="anonymous"
                async>
</script>
    }

    int commentCount = TutorialService.GetLegacyCommentCount(article);
    if (commentCount > 0)
    {
        <hr>

        var nestLevelMap = new Dictionary<ILegacyComment, int>();
        IReadOnlyList<ILegacyComment> legacyComments = TutorialService.GetLegacyComments(article);
        var commentStack = new Stack<ILegacyComment>(legacyComments.OrderByDescending(c => c.CreatedAt));
        <p class="legacy-comment-counter">
            <strong>@("legacy comment".ToQuantity(commentCount))</strong>
        </p>
        <p class="legacy-comment-subtitle">
            <sub>Legacy comments are comments that were posted using a commenting system that I no longer use. This exists for posterity.</sub>
        </p>

        while (commentStack.Count > 0)
        {
            ILegacyComment comment = commentStack.Pop();
            foreach (ILegacyComment reply in TutorialService.GetLegacyReplies(comment).OrderByDescending(c => c.CreatedAt))
            {
                if (nestLevelMap.TryGetValue(comment, out int currentLevel))
                {
                    nestLevelMap[reply] = currentLevel + 1;
                }
                else
                {
                    nestLevelMap[reply] = 1;
                }

                commentStack.Push(reply);
            }

            int padding = 0;
            if (nestLevelMap.TryGetValue(comment, out int nestLevel))
            {
                padding = 50 * nestLevel;
            }

            <div class="legacy-comment" style="margin-left: @(padding)px;">
                <img class="blog-author-icon" src="@comment.GetAvatarUrl()" alt="@comment.Author">
                @comment.Author ·

                <abbr class="text-muted" title="@comment.CreatedAt.ToString("dddd, d MMMM yyyy HH:mm")">
                    @comment.CreatedAt.Humanize()
                </abbr>

                <div class="comment">@Html.Raw(Markdown.ToHtml(comment.Body, MarkdownPipeline))</div>
            </div>
        }
    }
}
else
{
    <p class="no-comment">Comments are not enabled for this post.</p>
}