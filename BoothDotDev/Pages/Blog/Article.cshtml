@page "/blog/{year:int}/{month:int}/{day:int}/{slug}"
@using BoothDotDev.Common.Data
@using BoothDotDev.Common.Data.Blog
@using BoothDotDev.Common.Services
@using Humanizer
@using Markdig
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IBlogPostService BlogPostService
@inject MarkdownPipeline MarkdownPipeline
@model Article

@if (Model.ShowPasswordPrompt)
{
    <div class="callout" data-callout="danger">
        This post is private and can only be viewed by those with the password.
    </div>

    <form method="post">
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" name="password" required>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    return;
}

@if (Model.Post is not { } post)
{
    return;
}

@{
    ViewData["Page"] = "Blog";
    ViewData["Post"] = post;
    ViewData["Title"] = post.Title;
    IBlogAuthor author = post.Author;
    DateTimeOffset published = post.Published;
}

<article class="post-single">
    <header class="post-header">
        <div class="breadcrumbs">
            <a asp-page="/Index">Home</a>
            &nbsp;»&nbsp;
            <a asp-page="/Blog/Posts" asp-route-pageNumber="1">Posts</a>
            &nbsp;»&nbsp;
            <a asp-page="/Blog/Article"
               asp-route-year="@published.Year"
               asp-route-month="@published.Month.ToString("00")"
               asp-route-day="@published.Day.ToString("00")"
               asp-route-slug="@post.Slug">
                @post.Title
            </a>
        </div>
        <h1 class="post-title entry-hint-parent">@post.Title</h1>
        <div class="post-meta">
            <span title="@(published.ToString("s"))">@published.ToString("D")</span>
            &nbsp;·
            @Math.Max(1, post.Body.Split().Length / 275) min
            ·
            @author.DisplayName
        </div>
    </header>

    @switch (post.Visibility)
    {
        case Visibility.Private:
            <div class="callout" data-callout="danger">
                This post is private and can only be viewed by those with the password.
            </div>
            break;

        case Visibility.Unlisted:
            <div class="callout" data-callout="warning">
                This post is unlisted and can only be viewed by those with the link.
            </div>
            break;
    }

    <div class="post-content">
        @Html.Raw(BlogPostService.RenderPost(post))
    </div>

    <footer class="post-footer">
        <ul class="post-tags">
            @foreach (string tag in post.Tags)
            {
                <li>
                    <a asp-page="/Blog/Index" asp-route-tag="@tag">@tag.Replace('-', ' ')</a>
                </li>
            }
        </ul>
        <nav class="paginav">
            @if (BlogPostService.GetPreviousPost(post) is { } previousPost)
            {
                <a class="prev" asp-page="Article"
                   asp-route-year="@previousPost.Published.Year.ToString("0000")"
                   asp-route-month="@previousPost.Published.Month.ToString("00")"
                   asp-route-day="@previousPost.Published.Day.ToString("00")"
                   asp-route-slug="@previousPost.Slug">
                    <span class="title">« Prev</span>
                    <br>
                    <span>@previousPost.Title</span>
                </a>
            }
            @if (BlogPostService.GetNextPost(post) is { } nextPost)
            {
                <a class="next" asp-page="Article"
                   asp-route-year="@nextPost.Published.Year.ToString("0000")"
                   asp-route-month="@nextPost.Published.Month.ToString("00")"
                   asp-route-day="@nextPost.Published.Day.ToString("00")"
                   asp-route-slug="@nextPost.Slug">
                    <span class="title">Next »</span>
                    <br>
                    <span>@nextPost.Title</span>
                </a>
            }
        </nav>
    </footer>
</article>


@if (post.EnableComments)
{
    <div class="giscus"></div>
    @section Scripts
    {
        <script src="https://giscus.app/client.js"
                data-repo="oliverbooth/booth.dev"
                data-repo-id="MDEwOlJlcG9zaXRvcnkyNDUxODEyNDI="
                data-category="Comments"
                data-category-id="DIC_kwDODp0rOs4Ce_Nj"
                data-mapping="pathname"
                data-strict="0"
                data-reactions-enabled="1"
                data-emit-metadata="0"
                data-input-position="bottom"
                data-theme="preferred_color_scheme"
                data-lang="en"
                crossorigin="anonymous"
                async>
    </script>
    }
}
else
{
    <p class="no-comment">Comments are not enabled for this post.</p>
}

@{
    int commentCount = BlogPostService.GetLegacyCommentCount(post);
    if (commentCount > 0)
    {
        <hr>

        var nestLevelMap = new Dictionary<ILegacyComment, int>();
        IReadOnlyList<ILegacyComment> legacyComments = BlogPostService.GetLegacyComments(post);
        var commentStack = new Stack<ILegacyComment>(legacyComments.OrderByDescending(c => c.CreatedAt));
        <p class="legacy-comment-counter">
            <strong>@("legacy comment".ToQuantity(commentCount))</strong>
        </p>
        <p class="legacy-comment-subtitle">
            <sub>Legacy comments are comments that were posted using a commenting system that I no longer use. This exists for posterity.</sub>
        </p>

        while (commentStack.Count > 0)
        {
            ILegacyComment comment = commentStack.Pop();
            foreach (ILegacyComment reply in BlogPostService.GetLegacyReplies(comment).OrderByDescending(c => c.CreatedAt))
            {
                if (nestLevelMap.TryGetValue(comment, out int currentLevel))
                {
                    nestLevelMap[reply] = currentLevel + 1;
                }
                else
                {
                    nestLevelMap[reply] = 1;
                }

                commentStack.Push(reply);
            }

            int padding = 0;
            if (nestLevelMap.TryGetValue(comment, out int nestLevel))
            {
                padding = 50 * nestLevel;
            }

            <div class="legacy-comment" style="margin-left: @(padding)px;">
                <img class="blog-author-icon" src="@comment.GetAvatarUrl()" alt="@comment.Author">
                @comment.Author ·

                <abbr class="text-muted" title="@comment.CreatedAt.ToString("dddd, d MMMM yyyy HH:mm")">
                    @comment.CreatedAt.Humanize()
                </abbr>

                <div class="comment">@Html.Raw(Markdown.ToHtml(comment.Body, MarkdownPipeline))</div>
            </div>
        }
    }
}